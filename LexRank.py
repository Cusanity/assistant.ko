# -*- coding: utf-8 -*-
"""lexrank.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ars4w7YmtoqdCdaPUTnC0g3Vqcfd0jah
"""

import numpy

import math
import nltk
nltk.download('punkt')
nltk.download('stopwords')

from nltk import sent_tokenize, word_tokenize, PorterStemmer
from nltk.corpus import stopwords

o = "Peter and Elizabeth took a taxi to attend the night party in the city. While in the party, Elizabeth collapsed and was rushed to the hospital. Since she was diagnosed with a brain injury, the doctor told Peter to stay besides her until she gets well. Therefore, Peter stayed with her at the hospital for 3 days without leaving."

threshold = 0.1
epsilon = 0.1
stopWords = set(stopwords.words("english"))

sentences = sent_tokenize(o) # NLTK function
ts = len(sentences)
print(sentences)
print(ts)

freq_matrix = {}

for sent in sentences:
    freq_table = {}
    words = word_tokenize(sent)
    for word in words:
        word = word.lower()
        if word in stopWords:
            continue
        if word in freq_table:
            freq_table[word] += 1
        else:
            freq_table[word] = 1

    freq_matrix[sent] = freq_table
tf_matrix = {}
c = 0
for sent, f_table in freq_matrix.items():
    tf_table = {}

    count_words_in_sentence = len(f_table)
    for word, count in f_table.items():
        tf_table[word] = count / count_words_in_sentence

    tf_matrix[c] = tf_table
    c = c+1
print(tf_matrix)

word_per_doc_table = {}

for sent, f_table in freq_matrix.items():
    for word, count in f_table.items():
        if word in word_per_doc_table:
            word_per_doc_table[word] += 1
        else:
            word_per_doc_table[word] = 1
idf_matrix = {}
idf_table = {}
for sent, f_table in freq_matrix.items():

    for word in f_table.keys():
      if word not in idf_table:
        idf_table[word] = math.log10(ts / float(word_per_doc_table[word]))
      else:
        pass

    idf_matrix[sent] = idf_table
print(idf_table)

matrix = numpy.zeros((ts, ts))
print(matrix)

s = {}
for i in range(ts):
  s[i]=sentences[i]
stop_words = set(stopwords.words("english"))
for i in range(ts):
  for j in range(ts):
    u1 = word_tokenize(s[i])
    u1 = [word for word in u1 if word.isalpha()]
    u1 = [word for word in u1 if word not in stop_words]
    u1 = [element.lower() for element in u1]
    u2 = word_tokenize(s[j])
    u2 = [word for word in u2 if word.isalpha()]
    u2 = [word for word in u2 if word not in stop_words]
    u2 = [element.lower() for element in u2]
    common = list(set(u1) & set(u2))
    d1=0
    d2=0
    n=0.0
    for t in u1:
      if t in tf_matrix[i]:
        tf1=tf_matrix[i][t]
      else:
        tf1=0
      if t in idf_table:
        idf1=idf_table[t]
      else:
        idf1=0
      d1+=(tf1*idf1)**2
    for t in u2:
      if t in tf_matrix[j]:
        tf2=tf_matrix[j][t]
      else:
        tf2=0
      if t in idf_table:
        idf2=idf_table[t]
      else:
        idf2=0
      d2+=(tf2*idf2)**2
    for t in common:
      if t in tf_matrix[i]:
        tfc1=tf_matrix[i][t]
      else:
        tfc1=0
      if t in tf_matrix[j]:
        tfc2=tf_matrix[j][t]
      else:
        tfc2=0
      if t in idf_table:
        idf=idf_table[t]
      else:
        idf=0
      n+=tfc1*tfc2*idf**2
    if d1 > 0 and d2 > 0:
      matrix[i][j] =  n / (math.sqrt(d1) * math.sqrt(d2))
    else:
      matrix[i][j] = 0.0
print(matrix)

degrees = numpy.zeros((ts, ))
for i in range(ts):
  for j in range(ts):
    if matrix[i, j] > threshold:
      matrix[i, j] = 1.0
      degrees[i] += 1
    else:
      matrix[i, j] = 0
print(matrix)
print(degrees)

for i in range(ts):
    for j in range(ts):
        if degrees[i] == 0:
            degrees[i] = 1

        matrix[i][j] = matrix[i][j] / degrees[i]
print(matrix)

transposed_matrix = matrix.T
#print(transposed_matrix)
p_vector = numpy.array([1.0 / ts] * ts)
#print(p_vector)
lambda_val = 1.0

while lambda_val > epsilon:
  next_p = numpy.dot(transposed_matrix, p_vector)
  lambda_val = numpy.linalg.norm(numpy.subtract(next_p, p_vector))
  p_vector = next_p
print(p_vector)

avg = numpy.sum(p_vector) / len(p_vector)
print(avg)

for i in range(ts):
  if(p_vector[i]>=avg):
    print(s[i])

